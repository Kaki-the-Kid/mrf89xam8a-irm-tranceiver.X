/**
@page SPI Information om anvendte eksterne EEPROM

@section spi_files Filer for SPI forbindelse
- spi.h
- spi.c

<hr/>

SPI is a synchronous serial connection implemented by one clock line, one data line in each direction and an optional chip- select signal. In its most simple form, only one data line (either input or output) is present. Unlike the I2C bus, SPI is based on push/pull technology which allows running at much higher speeds than I2C. An SPI interface is not exactly a bus since there is no way to address different devices by an address. Data is sent synchronized by the clock line which is driven by the master. Using a different chip-select line for each device it is, however, possible to share wires between components. Speed and simplicity are the advantages of SPI and therefore, it is popular for applications like EEPROM/Flash programming, display control, sensor data acquisition etc.

SPI Overview
What is SPI?
* Serial Peripheral Interface (SPI) is a 4-wire full-duplex
synchronous serial data link:
– SCLK: Serial Clock
– MOSI: Master Out Slave In - Data from Master to Slave
– MISO: Master In Slave Out - Data from Slave to Master
– SS: Slave Select
* Originally developed by Motorola
* Used for connecting peripherals to each other and to
microprocessors
* Shift register that serially transmits data to other SPI devices
* Actually a “3 + n” wire interface with n = number of devices
* Only one master active at a time
* Various Speed transfers (function of the system clock)


The Serial Peripheral Interface (SPI) circuit is a
synchronous serial data link that is standard across
many Motorola microprocessors and other peripheral
chips. It provides support for a high bandwidth (1 mega
baud) network connection amongst CPUs and other
devices supporting the SPI. 


SPI - How are the connected devices recognized?


* Simple transfer scheme, 8 or 16 bits
* Allows many devices to use SPI through the addition of a shift register
* Full duplex communications
* Number of wires proportional to the number of devices in the bus


The SPI is essentially a “three-wire plus slave selects”
serial bus for eight or sixteen bit data transfer
applications. The three wires carry information between
devices connected to the bus. Each device on the bus
acts simultaneously as a transmitter and receiver. Two
of the three lines transfer data (one line for each
direction) and the third is a serial clock. Some devices
may be only transmitters while others only receivers.
Generally, a device that transmits usually possesses the
capability to receive data also. An SPI display is an
example of a receive-only device while EEPROM is a
receiver and transmit device.
The devices connected to the SPI bus may be classified
as Master or Slave devices. A master device initiates an
information transfer on the bus and generates clock and
control signals. A slave device is controlled by the
master through a slave select (chip enable) line and is
active only when selected. Generally, a dedicated select
line is required for each slave device. The same device
can possess the functionality of a master and a slave but
at any point of time, only one master can control the
bus in a multi-master mode configuration. Any slave
device that is not selected must release (make it high
impedance) the slave output line.
The SPI bus employs a simple shift register data
transfer scheme: Data is clocked out of and into the
active devices in a first-in, first-out fashion. It is in this
manner that SPI devices transmit and receive in full
duplex mode.
All lines on the SPI bus are unidirectional: The signal
on the clock line (SCLK) is generated by the master and
is primarily used to synchronize data transfer. The
master-out, slave-in (MOSI) line carries data from the
master to the slave and the master-in, slave-out (MISO)
line carries data from the slave to the master. Each
slave device is selected by the master via individual
select lines. Information on the SPI bus can be
transferred at a rate of near zero bits per second to 1
Mbits per second. Data transfer is usually performed in
eight/sixteen bit blocks. All data transfer is 

synchronized by the serial clock (SCLK). One bit of
data is transferred for each clock cycle. Four clock
modes are defined for the SPI bus by the value of the
clock polarity and the clock phase bits. The clock
polarity determines the level of the clock idle state and
the clock phase determines which clock edge places
new data on the bus. Any hardware device capable of
operation in more than one mode will have some
method of selecting the value of these bits. 

*There is no official specification for the SPI bus.
*It is necessary to consult the data sheets of the devices.
*Use to connect integrated circuits on a circuit board.
*Important parameters are the permitted clock frequencies and the type of valid transitions.
*Master - Slave ( 1 or more slaves) configuration.
*The master is usually a microprocessor.

SPI keeps the number of signal connections to a minimum and so reduces circuit board complexity.
Many diff peripheral device types available.
Many diff manufacturers of SPI devices (originally Motorola) - multiple sources
Not all manufacturers products are directly compatible! - small variations but can usually be worked around.
Typical SPI devices are :-
Flash EEPROM, ADC, DAG, temperature sensor, digital 10,RTC digital potentiometer etc.

The SPI bus specifies four logic signals.

SCLK - Serial Clock (output from master)
MOSI - Master Output, Slave Input (output from master)
MISO - Master Input, Slave Output (output from slave)
SS - Slave Select (active low; output from master)

Alternative naming conventions

D SCK, CLK - Serial Clock (output from master)

SDI, DI, SI - Serial Data In
SDO, DO, SO - Serial Data Out
D SSEL - Slave Select


<h2>Typical SPI Configuration</h2>

<img src="" />

1 . The master pulls the slave select low and then issues clock cycles.
2. The clock frequency is not specified in the SPI protocol and can be anything from 0 up to 70MHz depending on the characteristics of the slave device.
3. The data transfer then takes place.
4. The master then de-selects the slave.

Simple master slave implementation
During each SPI clock cycle, a full duplex data
transmission occurs:
o the master sends a bit on the MOSI line; the slave
reads it from that same line
o the slave sends a bit on the MISO line; the master
reads it from that same line
Not all transmissions require all four of these
operations to be meaningful but they do happen.
* The number of bits transferred is not fixed but is
usually a multiple of 8-bits.
6


Basic serial data transfer

<img src="spib.png" />


The registers within the master and slave act like shift registers
shifting one bit on every cycle of the SCLK.


Data transfer details
* Most SPI interfaces have two configuration bits, called
clock polarity (CPOL) and clock phase (CPHA).
* CPOL determines whether the shift clock's idle state is
low (CPOL=O) or high (CPOL=1 ) .
* CPHA determines on which clock edges data is shifted
in and out (for CPHA=O, MOSI data is shifted out on
falling edge, M ISO data is shifted in on rising edge).
* As each bit has two states, this allows for four different
combinations, all of which are incompatible with each
other.
* For two SPI devices to talk to each other, they need to
be set to use the same clock polarity and phase
settings.


SPI Data Transfer Modes
These four modes are the combinations of CPOL
and CPHA.
*Modes 0 and 3 are the most common.
*With SPI modes 0 and 3, data is always latched in
on the rising edge of SCK and always output on the
falling edge of SCK .
.
-
<img src="spic.png" />
<img src="spid.png" />


Multiple Slaves
I f multiple slave devices exist, the master
normally generates a separate slave select
signal for each slave. - Star connection.

<img src="spie.png" />
<img src="spif.png" />

SPI Bus characteristics
I t is up to the master and slave devices to know
whether a received byte is meaningful or not.
So a device must discard the received byte in a
''transmit only'' frame or generate a dummy byte
for a ''receive only'' frame.
No Acknowledgement
* Master doesn't even know if slave is present!
* Slaves can be thought of as 10 devices of the
master.


<pre style="padding: 10px; background-color: #e6ebf6; border-radius: 10px;">
/*Initialise SSP in SPI mode */
void init_SSPl(void)
{
	IODIR0 = IODIR0|PIN_SSPl_SS; //Enable SSEL pin as GPIO
	
	PINSEL0 |= 0x000A8000;		//Enable SSPl pins wih SSEL as GPIO
	//PINSEL0 I= 0x000AA000;	//Enable SSPl pins wiht SSEL as SS

	// Set DSS data to 8-bit, Frame format SPI, CPOL - 0, CPHA - 0, and SCR
	// (serial clock Rate (presscaler) is 15

	SSP1CR0 = 0xFF07;
	SSPlCRl = 0x00000002; //Configure as SPI Master
	
	// SSPCPSR clock prescale register, master mode, minimum divisor
	// is 0x02 MAX 254
	SSPlCPSR = 15;
}


// Send data to the SSP the start address and number of bytes (size of
// array) must be given
void SSPlSendData(unsigned char *data_add, unsigned char arr_size)
{
	int i;
	SSP1_SS(0); //Select slave active low
	for(i=0;i<arr_size;i++)
	{
		while ( (SSPlSR & SSPSR_BSY) ); // Wait until the Busy bit is cleared
		
		SSPlDR = *data_add;
		while ((SSPlSR & SSPSR_BSY) );	// Wait until the Busy bit is cleared
	
		data_ add++;
	}
	
	SSPl_SS(l);							//de-select slave
}


// Receive data to the SSP the start address of where the data should be
// stored, size of the data must be given */
void SSPlReceiveData (unsigned char *data_add, unsigned char arr_size)
{
	int i;
	SSP1_SS(0);
	
	for(i=0; i<arr_size; i++)
	{
		SSPlDR = 0x00; //dummy write
		while ( (SSPlSR & SSPSR_BSY) ); // Wait until the Busy bit is cleared
		
		*data_add= SSPlDR;
		while ( (SSPlSR & SSPSR_BSY) ); // Wait until the Busy bit is cleared

		data_add++;
	}

	SSPl_SS(l);

}
</pre>

<h2>Example SPI devices</h2>
25LC020A - 2K SPI Bus Serial EE PROM
* TC77-5.0 - Thermal Sensor with SPI Interface
* MCP3201 - 2.7V 12-Bit AID Converter with SPI Serial Interface
* MCP4822 - 12-Bit DAC with Internal VREF and SPI Interface
* MCP41010 - Single/Dual Digital Potentiometer with SPI Interface
* MCP6S92 - Single-Ended, Rail-to-Rail 1/0, Low-Gain PGA
* MCP23S08 - 8-Bit 1/0 Expander with Serial Interface
* The PICkit™ Serial SPI Demo Board was designed to easily

Note: On the demo boards the CS is global. You
must manually use the jumper to select the
device you wish to use!






*/